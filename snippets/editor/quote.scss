/* ====== 引用 ====== */
@use 'sass:math';
$num: 8;
$indent: 0.6rem;
$mark-size: 3rem;
body {
  --blockquote-background-color: var(--md-container-bg);
}
body.quote-theme .app-container {
  --blockquote-border-thickness: var(--size-4-1);
  --quote-radius: max(
    calc(var(--blockquote-border-thickness) / 2),
    var(--radius-s)
  );
  .markdown-source-view.mod-cm6 {
    :is(.HyperMD-quote:not(.callout), .cm-blockquote-border)::before {
      width: var(--blockquote-border-thickness);
      border-left: none;
      background-color: var(--blockquote-border-color);
      border-radius: var(--blockquote-border-thickness);
      top: var(--blockquote-border-thickness);
      bottom: var(--blockquote-border-thickness);
    }
    :is(.HyperMD-quote:not(.callout).cm-active, .HyperMD-quote:not(.callout).cm-active
        .cm-blockquote-border)::before {
      background-color: transparent;
    }
    .HyperMD-quote:not(.callout) {
      border-top-left-radius: 0 !important;
      border-top-right-radius: 0 !important;
      border-bottom-left-radius: var(--quote-radius);
      border-bottom-right-radius: var(--quote-radius);
      &.cm-active:not(:active)::before {
        background-color: transparent;
      }
      &::before {
        left: calc(var(--blockquote-border-thickness));
      }
      &:not(.cm-active) + .HyperMD-quote:not(.callout)::before {
        top: calc(var(--blockquote-border-thickness) * -3);
      }
      /* fill active line corner */
      &::after,
      .cm-quote.cm-formatting::after {
        content: '';
        position: absolute;
        display: inline-block;
        z-index: 9;
        height: var(--quote-radius);
        width: var(--quote-radius);
        top: calc(var(--blockquote-border-thickness) * -1);
        background-color: var(--md-container-bg);
      }
      &::after {
        left: 0;
      }
      .cm-quote.cm-formatting::after {
        right: 0;
      }

      &.cm-active + .HyperMD-quote:not(.callout)::after,
      &.cm-active
        + .HyperMD-quote:not(.callout)
        .cm-quote.cm-formatting::after {
        background-color: var(--active-line);
      }
    }
    :is(div:not(.HyperMD-quote) + .HyperMD-quote, .cm-content
        :first-child:is(.HyperMD-quote)) {
      border-top-left-radius: var(--quote-radius) !important;
      border-top-right-radius: var(--quote-radius) !important;
      &::after,
      .cm-quote.cm-formatting::after {
        content: none !important;
      }
    }
  }
  $items: ();
  @for $i from 2 through $num {
    @for $j from 2 through $num {
      $items: append(
        $list: $items,
        $val:
          '.HyperMD-quote-#{$j}:not(.callout):not(.cm-active) + .HyperMD-quote-#{$i}:not(.callout) .cm-blockquote-border:nth-of-type(-n + #{$j})',
        $separator: comma
      );
    }
  }
  :is(#{$items})::before {
    top: calc(var(--blockquote-border-thickness) * -2);
  }
  .markdown-rendered blockquote {
    background-color: var(--md-container-bg);
    border: none !important;
    border-radius: var(--radius-s);
    box-shadow: var(--shadow-s);
    margin-inline-end: 0;
    position: relative;
    margin: {
      left: 0;
      top: var(--size-4-2);
      bottom: var(--size-4-2);
    }
    padding: {
      top: 0;
      bottom: 0;
    }
    p {
      padding-left: var(--blockquote-border-thickness);
      padding-right: var(--size-4-1);
    }
    &::after {
      content: '';
      position: absolute;
      left: var(--blockquote-border-thickness);
      top: var(--blockquote-border-thickness);
      border-radius: calc(var(--blockquote-border-thickness) / 2);
      height: calc(100% - var(--blockquote-border-thickness) * 2);
      width: var(--blockquote-border-thickness);
      background-color: var(--accent-active);
    }
    blockquote {
      box-shadow: none;
      margin: 0;
    }
  }
}
/* fix bugs, corner fill cause wrap */
body.quote-theme.quote-break-all
  .HyperMD-quote:not(.callout)
  .cm-quote:not(.cm-formatting) {
  word-break: break-all;
}
body.quote-mark.quote-theme {
  :is(div:not(.HyperMD-quote)
      + .HyperMD-quote, .HyperMD-quote:not(.HyperMD-quote-1)
      + .HyperMD-quote-1, .cm-content :first-child:is(.HyperMD-quote)) {
    text-indent: $indent * 2 !important;
    &:not(.cm-active) {
      @at-root body.quote-mark.quote-theme blockquote::before,
        & > .cm-formatting.cm-formatting-quote.cm-quote-1::before {
        position: absolute;
        font-size: $mark-size;
        font-family: Source Code Pro;
        line-height: 1;
        content: '“' !important;
        background-color: transparent;
        color: var(--text-muted);
        top: calc(
          var(--font-text-size) * var(--line-height-normal) -
            math.div($mark-size, 1.4)
        );
        transform: translateX($indent * -2.2);
      }
    }
  }
  .markdown-rendered blockquote {
    padding-left: $indent * 3.8;
    &::before {
      transform: translateX($indent * -2.7);
    }
  }
}
// body.quote-theme {
//   --blockquote-border-thickness: var(--size-2-3);
//   --quote-radius: max(
//     calc(var(--blockquote-border-thickness) / 2),
//     var(--radius-s)
//   );
//   .markdown-source-view.mod-cm6.is-live-preview {
//     .HyperMD-quote:not(.callout) {
//       text-indent: 0 !important;
//       border-top-left-radius: 0 !important;
//       border-top-right-radius: 0 !important;
//       border-bottom-left-radius: var(--quote-radius);
//       border-bottom-right-radius: var(--quote-radius);
//       display: flex;

//       @for $i from 1 through $num {
//         &.HyperMD-quote-#{$i} {
//           padding-inline-start: $i * ($indent - 0.6rem) + 0.4rem !important;
//           text-indent: $i * -0.55rem !important;
//         }
//       }
//       /* === fix gap === */
//       .cm-quote:not(.cm-formatting) {
//         &::before,
//         &::after {
//           content: '';
//           position: absolute;
//           z-index: 9;
//           height: var(--quote-radius);
//           width: var(--quote-radius);
//           bottom: 0;
//           background-color: var(--md-container-bg);
//         }

//         &::before {
//           left: 0;
//         }
//         &::after {
//           right: 0;
//         }
//       }
//       &.cm-active .cm-quote:not(.cm-formatting) {
//         &::before,
//         &::after {
//           background-color: var(--active-line);
//         }
//       }
//       &::before,
//       &::after {
//         border-left: none !important;
//         content: '';
//         position: absolute;
//         left: var(--blockquote-border-thickness);
//         top: unset;
//         bottom: var(--blockquote-border-thickness);
//         height: calc(100% + var(--blockquote-border-thickness));
//         width: var(--blockquote-border-thickness);
//         border-radius: var(--blockquote-border-thickness);
//         background-color: var(--accent-active);
//         color: var(--accent-active);
//       }
//       &::before {
//         height: calc(100% - var(--blockquote-border-thickness) * 2);
//       }
//     }
//     :is(.internal-embed, .cm-line:not(.HyperMD-quote))
//       + .HyperMD-quote:not(.callout) {
//       &::before {
//         top: var(--blockquote-border-thickness);
//         height: calc(100% - var(--blockquote-border-thickness) * 2);
//       }
//       &::after {
//         content: none;
//       }
//     }
//     .cm-content :first-child:is(.HyperMD-quote)::after {
//       content: none;
//     }
//     :is(div:not(.HyperMD-quote) + .HyperMD-quote, .cm-line:not(.HyperMD-quote)
//         + .HyperMD-quote-1, .cm-content :first-child:is(.HyperMD-quote)) {
//       border-top-left-radius: var(--quote-radius) !important;
//       border-top-right-radius: var(--quote-radius) !important;
//       border-bottom-left-radius: 0;
//       border-bottom-right-radius: 0;
//       .cm-quote:not(.cm-formatting) {
//         &::before,
//         &::after {
//           content: none !important;
//         }
//       }
//     }
//     .cm-blockquote-border::before,
//     .HyperMD-callout .cm-quote::before {
//       content: none !important;
//     }
//   }
// }
// @for $i from 2 through $num {
//   $gap: $indent;
//   $shadow: '';
//   $active: ();
//   @for $j from 1 through $i - 1 {
//     $active: append(
//       $list: $active,
//       $val: unquote($gap * $j + ' 0'),
//       $separator: comma
//     );
//   }
//   @for $j from 1 through $num {
//     $before: ();
//     $after: ();
//     @if $j < $i {
//       @for $index from 1 through $i - 1 {
//         $temp: unquote($gap * $index + ' 0');
//         @if $index <= $j - 1 {
//           $after: append(
//             $list: $after,
//             $val: $temp,
//             $separator: comma
//           );
//         } @else {
//           $before: append(
//             $list: $before,
//             $val: $temp,
//             $separator: comma
//           );
//         }
//       }
//       @if $before == () {
//         $before: none;
//       }
//       @if $after == () {
//         $after: none;
//       }
//     } @else {
//       $before: none;
//       @for $index from 1 through $i - 1 {
//         $temp: unquote($gap * $index + ' 0');
//         $after: append(
//           $list: $after,
//           $val: $temp,
//           $separator: comma
//         );
//       }
//     }
//     div.HyperMD-quote-#{$j}:not(.callout)
//       + .HyperMD-quote-#{$i}:not(.callout):not(.cm-active)::before {
//       box-shadow: $before;
//     }
//     div.HyperMD-quote-#{$j}:not(.callout)
//       + .HyperMD-quote-#{$i}:not(.callout):not(.cm-active)::after {
//       box-shadow: $after;
//     }
//   }
//   div.HyperMD-quote:not(.callout):is(.cm-active)
//     + div.HyperMD-quote-#{$i}:not(.callout) {
//     &::before {
//       box-shadow: $active;
//     }
//     &::after {
//       box-shadow: none;
//     }
//   }
// }
body {
  --callout-radius: var(--radius-l);
}
