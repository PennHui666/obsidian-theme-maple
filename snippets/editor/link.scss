/* ====== 链接 ====== */

:is(body, .print .markdown-rendered) {
  --link-color-rgb: var(--setting-link-internal-color, var(--color-blue-rgb));
  --link-external-color-rgb: var(--setting-link-external-color, var(--color-orange-rgb));
  --link-color: rgba(var(--link-color-rgb), var(--color-opacity));
  --link-color-hover: var(--link-color);
  --link-external-color: rgba(var(--link-external-color-rgb), var(--color-opacity));
  --link-external-color-hover: var(--link-external-color);
  --link-unresolved-color: var(--text-faint);
  --link-footnote: var(--color-purple);
}

@property --link-offset {
  syntax: '<length>';
  inherits: false;
  initial-value: 4px;
}

@property --link-thickness {
  syntax: '<length>';
  inherits: false;
  initial-value: 2px;
}

@mixin hover-underline($color) {
  font-size: var(--font-text-size);
  text-underline-offset: var(--link-offset);
  color: $color !important;
  text-decoration-line: underline !important;
  text-decoration-skip-ink: none;
  text-decoration-color: $color !important;
  text-decoration-thickness: var(--link-thickness) !important;
  transition: --link-offset var(--animation), --link-thickness var(--animation),
    color var(--animation);

  &:hover,
  &:focus {
    color: var(--text-on-accent) !important;
    --link-offset: calc(var(--font-text-size) * -1);
    --link-thickness: calc(var(--font-text-size) + var(--size-2-3));
  }
}

@mixin hover-base($color) {
  transition: var(--animation);
  color: rgb($color);
  border-radius: var(--radius-s);
  text-underline-offset: var(--size-2-1);

  &:hover {
    background-color: rgb($color, 0.15);
  }

  &:active {
    background-color: rgb($color, 0.35);
  }
}

.cm-hmd-footnote .cm-underline {
  color: var(--link-footnote) !important;
  font-size: var(--footnote-size);
  text-decoration-color: var(--link-footnote) !important;
  pointer-events: none;
}

a.is-unresolved:hover {
  --link-color-hover: var(--link-unresolved-color);
}

.cm-s-obsidian .cm-formatting-link-string+span.cm-url {
  color: var(--link-color);
}

body span:is(.cm-formatting-link, .cm-formatting-link-string) {
  color: rgba(var(--color-green-rgb), 0.6) !important;
}

body:not(.link-hover-expand) {
  :is(a.external-link, .cm-link .cm-underline, .cm-url:not(.cm-string)) {
    @include hover-base(var(--link-external-color-rgb));
  }

  :is(a.internal-link:not(.is-unresolved), .cm-hmd-internal-link .cm-underline) {
    @include hover-base(var(--link-color-rgb));
  }

  span:is(.cm-link, .cm-hmd-internal-link):hover {
    text-decoration: none;
  }
}

body.link-hover-expand {
  .cm-url {
    --link-external-decoration: none;
    --link-external-decoration-hover: none;
  }

  .cm-link {
    --link-external-decoration-hover: none;
  }

  .cm-hmd-internal-link {
    --link-decoration-hover: none;
  }

  :is(a.external-link, :is(.cm-link, .cm-url) .cm-underline) {
    @include hover-underline(var(--link-external-color));
  }

  :is(a.internal-link:not(.is-unresolved), .cm-hmd-internal-link .cm-underline) {
    @include hover-underline(var(--link-color));
  }

  :is(.cm-hmd-internal-link, .cm-link) {
    transition: color var(--animation);
  }
}

body.link-icon {
  :is(:is(.markdown-source-view, .markdown-preview-view) a.internal-link:not(.is-unresolved), .cm-hmd-internal-link .cm-underline)::before {
    content: '';
    display: inline-block;
    transform: translateY(var(--size-2-1));
    width: calc(var(--font-text-size) - var(--size-2-1));
    height: calc(var(--font-text-size) - var(--size-2-1));
    background-color: var(--link-color);
    margin-inline: var(--size-2-1);
    // add icon in icons.scss
  }

  &:not(.link-click-to-edit-in-live-preview) {
    :is(:is(.markdown-source-view, .markdown-preview-view) a.external-link, :is(.cm-link:not(.cm-hmd-footnote, .cm-escape), .cm-url) .cm-underline):not(.cm-escape+.cm-link .cm-underline)::before {
      content: '';
      display: inline-block;
      width: calc(var(--font-text-size) - var(--size-4-1));
      height: calc(var(--font-text-size) - var(--size-4-1));
      margin-left: var(--size-2-1);
      margin-right: var(--size-2-1);
      background-color: var(--link-external-color);
      // add icon in icons.scss
    }

    a.external-link {
      background-image: none;
      background-size: unset;
      padding-right: 0;
    }

    span.external-link {
      display: none;
    }
  }
}

body.link-click-to-edit-in-live-preview :is(.cm-link .cm-underline, .cm-hmd-internal-link .cm-underline) {
  pointer-events: none;
}